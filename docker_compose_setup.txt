# docker-compose.yml
version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - tour-operator-network

  # Backend Node.js API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - AMADEUS_CLIENT_ID=Bd76Zxmr3DtsAgSCNVhRlgCzzFDROM07
      - AMADEUS_CLIENT_SECRET=Onw33473vAI1CTHS
      - AMADEUS_HOSTNAME=test
      - DATABASE_URL=postgresql://tour_operator:secure_password@postgres:5432/tour_operator_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your_super_secure_jwt_secret_change_this_in_production
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - tour-operator-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tour_operator_db
      - POSTGRES_USER=tour_operator
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tour-operator-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - tour-operator-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - tour-operator-network

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@touroperator.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - tour-operator-network

volumes:
  postgres_data:
  redis_data:

networks:
  tour-operator-network:
    driver: bridge

---

# frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Expose port
EXPOSE 3000

# Start development server
CMD ["npm", "start"]

---

# backend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci && npm cache clean --force

# Copy source code
COPY . .

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose port
EXPOSE 5000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["npm", "run", "dev"]

---

# nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:5000;
    }

    server {
        listen 80;
        server_name localhost;

        # Frontend routes
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for React hot reloading
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # API routes
        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            proxy_pass http://backend/api/health;
        }
    }
}

---

# database/init.sql
-- Create database schema for tour operator system

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    phone VARCHAR(20),
    role VARCHAR(20) DEFAULT 'customer',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Search history
CREATE TABLE IF NOT EXISTS search_history (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    search_type VARCHAR(20) NOT NULL, -- 'flight' or 'hotel'
    search_params JSONB NOT NULL,
    results_count INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Bookings
CREATE TABLE IF NOT EXISTS bookings (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    booking_type VARCHAR(20) NOT NULL, -- 'flight', 'hotel', 'package'
    amadeus_booking_id VARCHAR(100),
    booking_data JSONB NOT NULL,
    total_price DECIMAL(10,2),
    currency VARCHAR(3),
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Locations cache (airports, cities with coordinates)
CREATE TABLE IF NOT EXISTS locations (
    id SERIAL PRIMARY KEY,
    iata_code VARCHAR(3) UNIQUE,
    name VARCHAR(255) NOT NULL,
    city VARCHAR(100),
    country VARCHAR(100),
    country_code VARCHAR(2),
    type VARCHAR(20), -- 'airport' or 'city'
    latitude DECIMAL(10,8),
    longitude DECIMAL(11,8),
    timezone VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Flight cache
CREATE TABLE IF NOT EXISTS flight_cache (
    id SERIAL PRIMARY KEY,
    cache_key VARCHAR(255) UNIQUE NOT NULL,
    search_params JSONB NOT NULL,
    results JSONB NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Hotel cache
CREATE TABLE IF NOT EXISTS hotel_cache (
    id SERIAL PRIMARY KEY,
    cache_key VARCHAR(255) UNIQUE NOT NULL,
    search_params JSONB NOT NULL,
    results JSONB NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Pricing rules
CREATE TABLE IF NOT EXISTS pricing_rules (
    id SERIAL PRIMARY KEY,
    rule_type VARCHAR(20) NOT NULL, -- 'flight' or 'hotel'
    route_pattern VARCHAR(100), -- e.g., 'MAD-*' for all flights from Madrid
    markup_type VARCHAR(20) NOT NULL, -- 'percentage' or 'fixed'
    markup_value DECIMAL(8,4) NOT NULL,
    currency VARCHAR(3),
    valid_from DATE,
    valid_to DATE,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_search_history_user_id ON search_history(user_id);
CREATE INDEX IF NOT EXISTS idx_search_history_created_at ON search_history(created_at);
CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON bookings(user_id);
CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status);
CREATE INDEX IF NOT EXISTS idx_flight_cache_expires_at ON flight_cache(expires_at);
CREATE INDEX IF NOT EXISTS idx_hotel_cache_expires_at ON hotel_cache(expires_at);
CREATE INDEX IF NOT EXISTS idx_locations_iata_code ON locations(iata_code);
CREATE INDEX IF NOT EXISTS idx_locations_type ON locations(type);

-- Insert some sample airport data with coordinates
INSERT INTO locations (iata_code, name, city, country, country_code, type, latitude, longitude, timezone) VALUES
('MAD', 'Adolfo Su√°rez Madrid-Barajas Airport', 'Madrid', 'Spain', 'ES', 'airport', 40.472219, -3.560833, 'Europe/Madrid'),
('BCN', 'Barcelona-El Prat Airport', 'Barcelona', 'Spain', 'ES', 'airport', 41.2971, 2.0785, 'Europe/Madrid'),
('LHR', 'Heathrow Airport', 'London', 'United Kingdom', 'GB', 'airport', 51.4706, -0.4619, 'Europe/London'),
('CDG', 'Charles de Gaulle Airport', 'Paris', 'France', 'FR', 'airport', 49.0097, 2.5479, 'Europe/Paris'),
('JFK', 'John F. Kennedy International Airport', 'New York', 'United States', 'US', 'airport', 40.6413, -73.7781, 'America/New_York'),
('BKK', 'Suvarnabhumi Airport', 'Bangkok', 'Thailand', 'TH', 'airport', 13.6900, 100.7501, 'Asia/Bangkok'),
('DXB', 'Dubai International Airport', 'Dubai', 'United Arab Emirates', 'AE', 'airport', 25.2532, 55.3657, 'Asia/Dubai'),
('SIN', 'Singapore Changi Airport', 'Singapore', 'Singapore', 'SG', 'airport', 1.3644, 103.9915, 'Asia/Singapore'),
('FCO', 'Leonardo da Vinci Airport', 'Rome', 'Italy', 'IT', 'airport', 41.8003, 12.2389, 'Europe/Rome'),
('AMS', 'Amsterdam Airport Schiphol', 'Amsterdam', 'Netherlands', 'NL', 'airport', 52.3086, 4.7639, 'Europe/Amsterdam')
ON CONFLICT (iata_code) DO NOTHING;

COMMIT;